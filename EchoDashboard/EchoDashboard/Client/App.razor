<Fluxor.Blazor.Web.StoreInitializer />

@using System.Reflection
<ThemeProvider Theme="@appTheme">
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync" AdditionalAssemblies="@lazyLoadedAssemblies">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</ThemeProvider>

@code {

    @inject Microsoft.AspNetCore.Components.WebAssembly.Services.LazyAssemblyLoader lazyAssemblyLoader;

    private readonly List<Assembly> lazyLoadedAssemblies = new List<Assembly>();

    private async Task OnNavigateAsync(NavigationContext context)
    {
        if (context.Path == "archive" || context.Path == "buttons")
        {
            var assemblies = await lazyAssemblyLoader.LoadAssembliesAsync(new[] { "Archive.dll" });
            lazyLoadedAssemblies.AddRange(assemblies);
        }
        if (context.Path == "counter")
        {
            var assemblies = await lazyAssemblyLoader.LoadAssembliesAsync(new[] { "Counter.dll" });
            lazyLoadedAssemblies.AddRange(assemblies);
        }
        if (context.Path == "lazyload")
        {
            var assemblies = await lazyAssemblyLoader.LoadAssembliesAsync(new[] { "LazyLoadBlazorModule.dll" });
            lazyLoadedAssemblies.AddRange(assemblies);
        }
    }

    Theme appTheme = new Theme
    {
        ColorOptions = new ThemeColorOptions
        {
        }
    };
}